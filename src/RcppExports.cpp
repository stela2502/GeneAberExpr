// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/GeneAberExpr.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// IdentifyStates
NumericMatrix IdentifyStates(Eigen::SparseMatrix<double> data, std::vector<double> range, std::vector<int> interest, std::vector<int> background, bool phony);
RcppExport SEXP _GeneAberExpr_IdentifyStates(SEXP dataSEXP, SEXP rangeSEXP, SEXP interestSEXP, SEXP backgroundSEXP, SEXP phonySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type interest(interestSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type background(backgroundSEXP);
    Rcpp::traits::input_parameter< bool >::type phony(phonySEXP);
    rcpp_result_gen = Rcpp::wrap(IdentifyStates(data, range, interest, background, phony));
    return rcpp_result_gen;
END_RCPP
}
// IdentifyStatesTest
NumericMatrix IdentifyStatesTest(Eigen::SparseMatrix<double> data, std::vector<double> range, std::vector<int> interest, std::vector<int> background, bool phony);
RcppExport SEXP _GeneAberExpr_IdentifyStatesTest(SEXP dataSEXP, SEXP rangeSEXP, SEXP interestSEXP, SEXP backgroundSEXP, SEXP phonySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type interest(interestSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type background(backgroundSEXP);
    Rcpp::traits::input_parameter< bool >::type phony(phonySEXP);
    rcpp_result_gen = Rcpp::wrap(IdentifyStatesTest(data, range, interest, background, phony));
    return rcpp_result_gen;
END_RCPP
}
// GetTestModel
NumericMatrix GetTestModel(Eigen::MappedSparseMatrix<double> data, std::vector<double> range, std::vector<int> interest, std::vector<int> background, bool phony);
RcppExport SEXP _GeneAberExpr_GetTestModel(SEXP dataSEXP, SEXP rangeSEXP, SEXP interestSEXP, SEXP backgroundSEXP, SEXP phonySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type interest(interestSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type background(backgroundSEXP);
    Rcpp::traits::input_parameter< bool >::type phony(phonySEXP);
    rcpp_result_gen = Rcpp::wrap(GetTestModel(data, range, interest, background, phony));
    return rcpp_result_gen;
END_RCPP
}
// IceCreamTest
NumericMatrix IceCreamTest();
RcppExport SEXP _GeneAberExpr_IceCreamTest() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(IceCreamTest());
    return rcpp_result_gen;
END_RCPP
}
// goodGenes
std::vector<bool> goodGenes(Eigen::SparseMatrix<double> data, double max);
RcppExport SEXP _GeneAberExpr_goodGenes(SEXP dataSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(goodGenes(data, max));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GeneAberExpr_IdentifyStates", (DL_FUNC) &_GeneAberExpr_IdentifyStates, 5},
    {"_GeneAberExpr_IdentifyStatesTest", (DL_FUNC) &_GeneAberExpr_IdentifyStatesTest, 5},
    {"_GeneAberExpr_GetTestModel", (DL_FUNC) &_GeneAberExpr_GetTestModel, 5},
    {"_GeneAberExpr_IceCreamTest", (DL_FUNC) &_GeneAberExpr_IceCreamTest, 0},
    {"_GeneAberExpr_goodGenes", (DL_FUNC) &_GeneAberExpr_goodGenes, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_GeneAberExpr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
