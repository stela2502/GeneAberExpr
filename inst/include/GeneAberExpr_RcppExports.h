// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_GeneAberExpr_RCPPEXPORTS_H_GEN_
#define RCPP_GeneAberExpr_RCPPEXPORTS_H_GEN_

#include <RcppEigen.h>
#include <Rcpp.h>

namespace GeneAberExpr {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("GeneAberExpr", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("GeneAberExpr", "_GeneAberExpr_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in GeneAberExpr");
            }
        }
    }

    inline NumericMatrix IdentifyStates(Eigen::SparseMatrix<double> data, std::vector<double> range, std::vector<int> interest, std::vector<int> background, bool phony) {
        typedef SEXP(*Ptr_IdentifyStates)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_IdentifyStates p_IdentifyStates = NULL;
        if (p_IdentifyStates == NULL) {
            validateSignature("NumericMatrix(*IdentifyStates)(Eigen::SparseMatrix<double>,std::vector<double>,std::vector<int>,std::vector<int>,bool)");
            p_IdentifyStates = (Ptr_IdentifyStates)R_GetCCallable("GeneAberExpr", "_GeneAberExpr_IdentifyStates");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_IdentifyStates(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(range)), Shield<SEXP>(Rcpp::wrap(interest)), Shield<SEXP>(Rcpp::wrap(background)), Shield<SEXP>(Rcpp::wrap(phony)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline NumericMatrix IdentifyStatesTest(Eigen::SparseMatrix<double> data, std::vector<double> range, std::vector<int> interest, std::vector<int> background, bool phony) {
        typedef SEXP(*Ptr_IdentifyStatesTest)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_IdentifyStatesTest p_IdentifyStatesTest = NULL;
        if (p_IdentifyStatesTest == NULL) {
            validateSignature("NumericMatrix(*IdentifyStatesTest)(Eigen::SparseMatrix<double>,std::vector<double>,std::vector<int>,std::vector<int>,bool)");
            p_IdentifyStatesTest = (Ptr_IdentifyStatesTest)R_GetCCallable("GeneAberExpr", "_GeneAberExpr_IdentifyStatesTest");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_IdentifyStatesTest(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(range)), Shield<SEXP>(Rcpp::wrap(interest)), Shield<SEXP>(Rcpp::wrap(background)), Shield<SEXP>(Rcpp::wrap(phony)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline NumericMatrix GetTestModel(Eigen::MappedSparseMatrix<double> data, std::vector<double> range, std::vector<int> interest, std::vector<int> background, bool phony) {
        typedef SEXP(*Ptr_GetTestModel)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_GetTestModel p_GetTestModel = NULL;
        if (p_GetTestModel == NULL) {
            validateSignature("NumericMatrix(*GetTestModel)(Eigen::MappedSparseMatrix<double>,std::vector<double>,std::vector<int>,std::vector<int>,bool)");
            p_GetTestModel = (Ptr_GetTestModel)R_GetCCallable("GeneAberExpr", "_GeneAberExpr_GetTestModel");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_GetTestModel(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(range)), Shield<SEXP>(Rcpp::wrap(interest)), Shield<SEXP>(Rcpp::wrap(background)), Shield<SEXP>(Rcpp::wrap(phony)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline NumericMatrix IceCreamTest(bool phony) {
        typedef SEXP(*Ptr_IceCreamTest)(SEXP);
        static Ptr_IceCreamTest p_IceCreamTest = NULL;
        if (p_IceCreamTest == NULL) {
            validateSignature("NumericMatrix(*IceCreamTest)(bool)");
            p_IceCreamTest = (Ptr_IceCreamTest)R_GetCCallable("GeneAberExpr", "_GeneAberExpr_IceCreamTest");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_IceCreamTest(Shield<SEXP>(Rcpp::wrap(phony)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline std::vector<bool> goodGenes(Eigen::SparseMatrix<double> data, double max) {
        typedef SEXP(*Ptr_goodGenes)(SEXP,SEXP);
        static Ptr_goodGenes p_goodGenes = NULL;
        if (p_goodGenes == NULL) {
            validateSignature("std::vector<bool>(*goodGenes)(Eigen::SparseMatrix<double>,double)");
            p_goodGenes = (Ptr_goodGenes)R_GetCCallable("GeneAberExpr", "_GeneAberExpr_goodGenes");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_goodGenes(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(max)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<bool> >(rcpp_result_gen);
    }

}

#endif // RCPP_GeneAberExpr_RCPPEXPORTS_H_GEN_
